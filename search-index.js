var searchIndex = new Map(JSON.parse('[\
["leveldb",{"doc":"","t":"EEEECCCCFNNNNNNNNNNNNFNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNN","n":["Db","Options","ReadOptions","String","db","iter","options","string","Db","borrow","borrow_mut","drop","fmt","from","get","into","iter_owned","open","try_from","try_into","type_id","OwnedIterator","borrow","borrow_mut","drop","from","from_parts","into","into_iter","key","next","try_from","try_into","type_id","valid","value","Options","ReadOptions","borrow","borrow","borrow_mut","borrow_mut","default","default","drop","drop","fmt","fmt","from","from","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","String","as_bytes","borrow","borrow_mut","drop","fmt","from","from_ptr","into","is_empty","len","to_str","to_string_lossy","try_from","try_from_ptr","try_from_ptr_len","try_into","type_id"],"q":[[0,"leveldb"],[8,"leveldb::db"],[21,"leveldb::iter"],[36,"leveldb::options"],[60,"leveldb::string"],[78,"core::fmt"],[79,"core::fmt"],[80,"core::result"],[81,"alloc::vec"],[82,"core::convert"],[83,"core::any"],[84,"leveldb_sys"],[85,"std::os::raw"],[86,"core::str::error"],[87,"alloc::borrow"]],"d":["","","","","","","","","A Leveldb Database","","","","","Returns the argument unchanged.","Get a value with a key.","Calls <code>U::from(self)</code>.","Iter all db keys","Open a leveldb database.","","","","","","","","Returns the argument unchanged.","Safety","Calls <code>U::from(self)</code>.","","Fairly certain this should be &amp;mut. TODO: Fix upstream.","","","","","","Fairly certain this should be &amp;mut. TODO: Fix upstream.","Leveldb Open options","Options for reading keys","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a new options object","Make a new ReadOptions object","","","","","","","A LevelDB CString.","Get the contents as a byte slice.","","","","","Returns the argument unchanged.","Make a <code>String</code> from a ptr.","Calls <code>U::from(self)</code>.","Check if this is empty.","Get the len.","Try to convert this into a str.","Lossily convert this into a str.","","Make a <code>String</code> from a ptr.","Make a <code>String</code> from a ptr and a len, fallibly.","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,12,5,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,3],4],[-1,-1,[]],[[1,5,[7,[6]]],[[10,[[9,[8]],8]]]],[-1,-2,[],[]],[[1,5],11],[[-1,12],[[10,[1,8]]],[[14,[[13,[6]]]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,2],[-1,-1,[]],[[16,1],11],[-1,-2,[],[]],[-1,-2,[],[]],[11,[[9,[[13,[6]]]]]],[11,[[9,[-1]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,15,[]],[11,17],[11,[[9,[[13,[6]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[[],5],[12,2],[5,2],[[12,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[[],5],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,[8,[[7,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[8,2],[[8,3],4],[-1,-1,[]],[18,8],[-1,-2,[],[]],[8,17],[8,19],[8,[[10,[20,21]]]],[8,[[22,[20]]]],[-1,[[10,[-2]]],[],[]],[18,[[9,[8]]]],[[18,19],[[9,[8]]]],[-1,[[10,[-2]]],[],[]],[-1,15,[]]],"c":[],"p":[[5,"Db",8],[1,"tuple"],[5,"Formatter",78],[8,"Result",78],[5,"ReadOptions",36],[1,"u8"],[1,"slice"],[5,"String",60],[6,"Option",79],[6,"Result",80],[5,"OwnedIterator",21],[5,"Options",36],[5,"Vec",81],[10,"Into",82],[5,"TypeId",83],[5,"leveldb_iterator_t",84],[1,"bool"],[8,"c_char",85],[1,"usize"],[1,"str"],[5,"Utf8Error",86],[6,"Cow",87]],"b":[]}],\
["leveldb_cli",{"doc":"","t":"PPPGPGPPPPGPNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNOOO","n":["Bytes","Bytes","ChromeLocalStorage","Command","Exit","KeyFormat","KeyFormat","List","Open","Utf8","ValueFormat","ValueFormat","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","from","from","from","from_str","into","into","into","main","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","format","format","path"],"q":[[0,"leveldb_cli"],[46,"leveldb_cli::Command"],[49,"core::fmt"],[50,"core::fmt"],[51,"anyhow"],[52,"core::any"]],"d":["A byte array","A byte array","Chrome Local Storage","","Exit CLI","The format to display keys with","Set the key format.","List entries","Open a database","A UTF-8 String,","The format to display values with","Set the value format","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The new format","The new format","The path to the database"],"i":[1,2,2,0,4,0,4,4,4,1,0,4,4,1,2,4,1,2,1,2,1,2,1,2,4,1,2,4,1,2,4,4,1,2,0,1,2,4,1,2,4,1,2,4,1,2,11,12,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],1],[[],2],[[4,5],6],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[7,[[8,[4,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[9,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0],"c":[],"p":[[6,"KeyFormat",0],[6,"ValueFormat",0],[1,"tuple"],[6,"Command",0],[5,"Formatter",49],[8,"Result",49],[1,"str"],[6,"Result",50],[8,"Result",51],[5,"TypeId",52],[15,"KeyFormat",46],[15,"ValueFormat",46],[15,"Open",46]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
